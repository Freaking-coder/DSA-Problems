Example:
Input=[1,1,2,2,3,3]
output=2
Explanation:As 3 exist two times

Intuition of code
As the array is sorted ,none other than we can go with binary search where we have to find the
first and the last occurence and subract last occurrence and first occurrence and add 1.


#############################################################

class Solution {

    private int firstPosition(int[] nums,int target)
    {
        int first=-1;
        int low=0,high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                first=mid;
                high=mid-1;
            }
            else if(nums[mid]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return first;
    }
    private int lastPosition(int[] nums,int target)
    {
        int last=-1;
        int low=0,high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return last;
    }
    public int[] searchRange(int[] nums, int target) {

        int first=firstPosition(nums,target);
        if(first==-1) return 0;
        int last=lastPosition(nums,target);
        return (last-first)+1;
     }
}
