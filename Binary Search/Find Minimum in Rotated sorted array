Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.


Intuition

Consider a array find which side is sorted like left or right is sorted.
If left is sorted find the minimum in that and eliminate and vice versa.
How to find left or right is sorted?Check the mid value is less than the left value or else no.

##################################################################################################
class Solution {
    public int findMin(int[] nums) {

        int left=0;
        int right=nums.length-1;
        int ans=nums[0];

        while(left<=right)
        {
            if(nums[left]<nums[right])
            {
                ans=Math.min(ans,nums[left]);
            }
            int mid=left+(right-left)/2;
            ans=Math.min(ans,nums[mid]);

            if(nums[left]<=nums[mid])
            {
              left=mid+1;
            }
            else
            {
                right=right-1;
            }
        }
       return ans; 
    }
}
