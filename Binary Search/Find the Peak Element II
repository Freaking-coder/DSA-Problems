A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 

Example 1:



Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.
Example 2:



Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.




#############################################################################





class Solution {
    private int MaxElement(int[][] mat,int n,int m,int col)
    {
        int maxValue=-1;
        int index=-1;
        for(int i=0;i<n;i++)
        {
            if(mat[i][col] > maxValue)
            {
                maxValue=mat[i][col];
                index=i;
            }
        }
        return index;
    }
    public int[] findPeakGrid(int[][] mat) {
        int n=mat.length;
        int m=mat[0].length;
        int low=0,high=m-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            int MaxRowIndex=MaxElement(mat,n,m,mid);
            int left=mid-1 >=0 ?mat[MaxRowIndex][mid-1]:-1;
            int right=mid+1 < m ?mat[MaxRowIndex][mid+1]:-1;
            if(mat[MaxRowIndex][mid]>left && mat[MaxRowIndex][mid]>right)
            {
                return new int[]{MaxRowIndex,mid};
            }
            else if(mat[MaxRowIndex][mid] < left)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
            
        }
     
        return new int[]{-1,-1};
    }
}
