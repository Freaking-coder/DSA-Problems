Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

The test cases are generated so that there will be an answer.

 

Example 1:

Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 

Intuition
The value will be with the range of array(max of arr)
so we can use BS on answers
where low is 0 and high max value of arr
if the condition satisfies return the answer.
#########################################################################



class Solution {

    private int smalldivisor(int nums[],int mid)
    {
        int n=nums.length;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=Math.ceil((double)nums[i]/(double)mid);
        }
        return sum;
    }
    private int getMax(int[] nums) {
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        return max;
    }
    public int smallestDivisor(int[] nums, int threshold) {

        int low=1,high=getMax(nums);
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(smalldivisor(nums,mid)<=threshold)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return low;
        
    }
    
}
