## are given an integer array nums and a positive integer k.

Return the number of subarrays where the maximum element of nums appears at least k times in that subarray.

A subarray is a contiguous sequence of elements within an array.

 Example 1:

Input: nums = [1,3,2,3,3], k = 2
Output: 6
Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].##


class Solution {
    public long countSubarrays(int[] nums, int k) {
        int n=nums.length;
        int left=0;
        long result=0;
        int count=0,MaxValue=0;
        
        for(int num:nums)
        {
            MaxValue=Math.max(MaxValue,num);
        }

        for(int right=0;right<n;right++)
        {
            if(nums[right]==MaxValue)
            {
                count++;
            }
            while(count>=k)
            {
                if(nums[left]==MaxValue)
                {
                    count--;
                }
                left++;
            }
            result+=left;
        }
       return result;
    }
}
